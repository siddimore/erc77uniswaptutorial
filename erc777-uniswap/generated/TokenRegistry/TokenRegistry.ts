// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InterfaceImplementerSet extends ethereum.Event {
  get params(): InterfaceImplementerSet__Params {
    return new InterfaceImplementerSet__Params(this);
  }
}

export class InterfaceImplementerSet__Params {
  _event: InterfaceImplementerSet;

  constructor(event: InterfaceImplementerSet) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get interfaceHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get implementer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ManagerChanged extends ethereum.Event {
  get params(): ManagerChanged__Params {
    return new ManagerChanged__Params(this);
  }
}

export class ManagerChanged__Params {
  _event: ManagerChanged;

  constructor(event: ManagerChanged) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenRegistry extends ethereum.SmartContract {
  static bind(address: Address): TokenRegistry {
    return new TokenRegistry("TokenRegistry", address);
  }

  getManager(_addr: Address): Address {
    let result = super.call("getManager", "getManager(address):(address)", [
      ethereum.Value.fromAddress(_addr)
    ]);

    return result[0].toAddress();
  }

  try_getManager(_addr: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager(address):(address)", [
      ethereum.Value.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interfaceHash(_interfaceName: string): Bytes {
    let result = super.call(
      "interfaceHash",
      "interfaceHash(string):(bytes32)",
      [ethereum.Value.fromString(_interfaceName)]
    );

    return result[0].toBytes();
  }

  try_interfaceHash(_interfaceName: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "interfaceHash",
      "interfaceHash(string):(bytes32)",
      [ethereum.Value.fromString(_interfaceName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInterfaceImplementer(_addr: Address, _interfaceHash: Bytes): Address {
    let result = super.call(
      "getInterfaceImplementer",
      "getInterfaceImplementer(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromFixedBytes(_interfaceHash)
      ]
    );

    return result[0].toAddress();
  }

  try_getInterfaceImplementer(
    _addr: Address,
    _interfaceHash: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getInterfaceImplementer",
      "getInterfaceImplementer(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromFixedBytes(_interfaceHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementsERC165InterfaceNoCache(
    _contract: Address,
    _interfaceId: Bytes
  ): boolean {
    let result = super.call(
      "implementsERC165InterfaceNoCache",
      "implementsERC165InterfaceNoCache(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_interfaceId)
      ]
    );

    return result[0].toBoolean();
  }

  try_implementsERC165InterfaceNoCache(
    _contract: Address,
    _interfaceId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "implementsERC165InterfaceNoCache",
      "implementsERC165InterfaceNoCache(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_interfaceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  implementsERC165Interface(_contract: Address, _interfaceId: Bytes): boolean {
    let result = super.call(
      "implementsERC165Interface",
      "implementsERC165Interface(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_interfaceId)
      ]
    );

    return result[0].toBoolean();
  }

  try_implementsERC165Interface(
    _contract: Address,
    _interfaceId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "implementsERC165Interface",
      "implementsERC165Interface(address,bytes4):(bool)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromFixedBytes(_interfaceId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetInterfaceImplementerCall extends ethereum.Call {
  get inputs(): SetInterfaceImplementerCall__Inputs {
    return new SetInterfaceImplementerCall__Inputs(this);
  }

  get outputs(): SetInterfaceImplementerCall__Outputs {
    return new SetInterfaceImplementerCall__Outputs(this);
  }
}

export class SetInterfaceImplementerCall__Inputs {
  _call: SetInterfaceImplementerCall;

  constructor(call: SetInterfaceImplementerCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interfaceHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _implementer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetInterfaceImplementerCall__Outputs {
  _call: SetInterfaceImplementerCall;

  constructor(call: SetInterfaceImplementerCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class UpdateERC165CacheCall extends ethereum.Call {
  get inputs(): UpdateERC165CacheCall__Inputs {
    return new UpdateERC165CacheCall__Inputs(this);
  }

  get outputs(): UpdateERC165CacheCall__Outputs {
    return new UpdateERC165CacheCall__Outputs(this);
  }
}

export class UpdateERC165CacheCall__Inputs {
  _call: UpdateERC165CacheCall;

  constructor(call: UpdateERC165CacheCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interfaceId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateERC165CacheCall__Outputs {
  _call: UpdateERC165CacheCall;

  constructor(call: UpdateERC165CacheCall) {
    this._call = call;
  }
}
